% \iffalse meta-comment
%% =============================================================================
%%
%% string-diagrams <VERSION> (<DATE>)
%%
%% Copyright (C) 2023 by Paolo Brasolin <paolo.brasolin@gmail.com>
%% SPDX-License-Identifier: LPPL-1.3c
%%
%% =============================================================================
%%
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   https://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008 or later.
%%
%% This work has the LPPL maintenance status `author-maintained'.
%%
%% The Current Maintainer of this work is Paolo Brasolin.
%%
%% This work consists of the files  README.md,
%%                                  string-diagrams.dtx,
%% and the derived files            string-diagrams.ins,
%%                                  string-diagrams.sty, and
%%                                  string-diagrams.pdf.
%%
%% =============================================================================
%
% %%%=[ INSTALL ]===============================================================
%
%<*internal>
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%
%<*install>
\input l3docstrip.tex
\keepsilent
\askforoverwritefalse

% NOTE: to avoid redundancy we use `%%'-lines instead of pre/postambles
\preamble
\endpreamble
\nopostamble

\usedir{tex/latex/string-diagrams}
\generate{\file{\jobname.sty}{\from{\jobname.dtx}{package}}}

%</install>
%<*internal>

\usedir{source/latex/string-diagrams}
\generate{\file{\jobname.ins}{\from{\jobname.dtx}{install}}}

%</internal>
%
%<*internal>
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%
%<install>\endbatchfile
%
% %%%=[ DRIVER ]================================================================
%
%<*driver>
\documentclass[a4paper,full]{l3doc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\usepackage{string-diagrams}
\usetikzlibrary{calc}
\usepackage{snapshot}

\usepackage{tcolorbox}
\tcbuselibrary{listings, skins}

\lstset{
  language=[LaTeX]TeX,
  basicstyle=\ttfamily\small,
  columns=flexible,
  ^^A keywordstyle=\color{red},
  ^^A morekeywords={},
  texcsstyle=*\color{violet},
  moretexcs={node,wires},
  breaklines=true,
}

\tcbset{example/.style={
  listing engine=listings,
  verbatim ignore percent=true,
  listing side text,
  size=minimal,
  skin=bicolor,
  colback=black!5!white,
  colbacklower=white,
  sidebyside,
  lefthand ratio=0.62,
  listing options={
    xleftmargin=-0.6em, % poor man's gobble=4
  },
}}

\begin{document}
  \DocInput{\jobname.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
%
% \fi
%
% \changes{0.1.0}{2023/05/20}{Initial version}
%
% \GetFileInfo{\jobname.sty}
%
% \title{^^A
%   The \pkg{\jobname} package^^A
%   \thanks{Thanks!}\\^^A
%   \fileinfo^^A
% }
%
% \author{^^A
%   Paolo Brasolin\\^^A
%   \texttt{\href{mailto:paolo.brasolin@gmail.com}{paolo.brasolin@gmail.com}}^^A
% }
%
% \date{\fileversion~(\filedate)}
%
% \maketitle
%
% ^^A=[ DOCUMENTATION ]=========================================================
%
% \begin{documentation}
%
% \begin{tcolorbox}[
%   colback=red!5!white,
%   colframe=red,
%   sharp corners,
%   boxrule=1pt,
% ]
% Please note this is the \href{https://semver.org/#spec-item-4}{major version zero}, meant for initial development: \emph{anything MAY change at any time}.
% The upside is that this is the best time to \href{https://github.com/paolobrasolin/string-diagrams/issues}{contribute}!
% Of course you can also just keep the \texttt{sty} along with your code and not care at all.
% \end{tcolorbox}
% 
%
% \section{Documentation}
%
% Let's walk through the features by example.
%
%
% To draw boxes, you use the \texttt{box} style on a node.
%
% \begin{tcblisting}{example}
%   \begin{tikzpicture}
%     \node[box] {A};
%   \end{tikzpicture}
% \end{tcblisting}
%
% You can draw multiple boxes using any of your standard Ti\emph{k}Z positioning techniques.
% Don't forget to label the nodes so you can easily reference them.
%
% \begin{tcblisting}{example}
%   \begin{tikzpicture}
%     \node[box] (A) at (0,0) {A};
%     \node[box, right of=A] (B) {B};
%     \node[box] (C) at ($(B)+(2cm,1em)$) {C};
%   \end{tikzpicture}
% \end{tcblisting}
%
% To connect boxes, you can use the \cmd\wires\ macro.
% The first argument is Ti\emph{k}Z styling for the wires; the second argument is a nested dicionary specifying the connectivity; the third argument is a list of the loose ends to draw.
% \texttt{box}es have the following anchors: \texttt{west}, \texttt{west0}, \texttt{west1},  \texttt{east}, \texttt{east0}, and \texttt{east1}.
%
% \begin{tcblisting}{example}
%   \begin{tikzpicture}[scale=0.6]
%     \node[box] (A) at (-2, 0) {A};
%     \node[box] (B) at (+2, 0) {B};
%     \node[box] (C) at ( 0,+1) {C};
%     \node[box] (D) at ( 0,-1) {D};
%     \wires[]{
%       A = { east0 = C.west, east1 = D.west },
%       C = { east = B.west0 },
%       D = { east = B.west1 },
%     }{ A.west, B.east }
%   \end{tikzpicture}
% \end{tcblisting}
%
% To split and join wires, you can use \texttt{dot}s and their anchors \texttt{north}, \texttt{east}, \texttt{south}, and \texttt{west}.
% Remember to have fun with styling wires.
%
% \begin{tcblisting}{example}
%   \begin{tikzpicture}
%     \node[box] (A) at ( 0,+1) {A};
%     \node[box] (B) at ( 0,-1) {B};
%     \node[dot] (x) at (+1, 0) {};
%     \node[dot] (y) at (-1, 0) {};
%     \wires[looseness=1.5, dashed]{
%       A = { east = x.north },
%       B = { east0 = x.south },
%       y = { north = A.west1, south = B.west },
%     }{
%       A.west0, B.east1, x.east, y.west
%     }
%   \end{tikzpicture}
% \end{tcblisting}
%
% That's it. This is the package, for now.
%
% \end{documentation}
%
% ^^A=[ PACKAGE ]===============================================================
%
% \begin{implementation}
%
% \section{Implementation}
%
% Open the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Identify the internal prefix (\LaTeX3 \pkg{DocStrip} convention).
%    \begin{macrocode}
%<@@=stridi>
%    \end{macrocode}
%
% Load the essential support (\pkg{expl3}) \enquote{up-front}.
%
%    \begin{macrocode}
\RequirePackage{expl3}[2023/05/11]
\RequirePackage{tikz}[2023/01/15]
%    \end{macrocode}
%
% Identify the package and give the over all version information.
%    \begin{macrocode}
\ProvidesExplPackage
  {string-diagrams}
  {<DATE>}
  {<VERSION>}
  {Draw string diagrams using TikZ}
%    \end{macrocode}
%
% Define a shape with useful anchor points.
%    \begin{macrocode}
\pgfdeclareshape{box}{
  \inheritbackgroundpath[from=rectangle]
  \inheritsavedanchors[from=rectangle]
  \inheritanchorborder[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{east}
  \anchor{east0}{
    \pgf@process{\southwest}
    \pgf@ya=0.25\pgf@y
    \pgf@process{\northeast}
    \pgf@y=0.75\pgf@y
    \advance\pgf@y by \pgf@ya
  }
  \anchor{east1}{
    \pgf@process{\southwest}
    \pgf@ya=0.75\pgf@y
    \pgf@process{\northeast}
    \pgf@y=0.25\pgf@y
    \advance\pgf@y by \pgf@ya
  }
  \anchor{west0}{
    \pgf@process{\northeast}
    \pgf@ya=0.75\pgf@y
    \pgf@process{\southwest}
    \pgf@y=0.25\pgf@y
    \advance\pgf@y by \pgf@ya
  }
  \anchor{west1}{
    \pgf@process{\northeast}
    \pgf@ya=0.25\pgf@y
    \pgf@process{\southwest}
    \pgf@y=0.75\pgf@y
    \advance\pgf@y by \pgf@ya
  }
}
%    \end{macrocode}
% Define styles to draw boxes and dots.
%    \begin{macrocode}
\ExplSyntaxOff
\tikzset{
  box/.style={
    shape=box,
    draw,
    inner sep=.5em,
    minimum width=2em,
    minimum height=2em,
    execute at begin node=$,
    execute at end node=$,
  },
  dot/.style={
    shape=circle,
    fill,
    inner sep=0,
    minimum width=0.4em,
  },
}
\ExplSyntaxOn
%    \end{macrocode}
%
% Define our main actor.
% \begin{macro}{\wires}
%    \begin{macrocode}
\NewDocumentCommand{\wires}{ o m m }
{
  \prop_set_from_keyval:Nn \l_tmpa_prop { #2 }
  \prop_map_inline:Nn \l_tmpa_prop
  {
    \prop_set_from_keyval:Nn \l_tmpb_prop { ##2 }
    \prop_map_inline:Nn \l_tmpb_prop
    {
      \regex_match_case:nnTF
      {
        { \. north } { \tl_gset:Nn \g_tmpa_tl { 90 } }
        { \. south } { \tl_gset:Nn \g_tmpa_tl { -90 } }
        { \. west } { \tl_gset:Nn \g_tmpa_tl { 180 } }
        { \. east } { \tl_gset:Nn \g_tmpa_tl { 0 } }
      } { ####2 } {} {}
      \regex_match_case:nnTF
      {
        { north } { \tl_gset:Nn \g_tmpb_tl { 90 } }
        { south } { \tl_gset:Nn \g_tmpb_tl { -90 } }
        { west } { \tl_gset:Nn \g_tmpb_tl { 180 } }
        { east } { \tl_gset:Nn \g_tmpb_tl { 0 } }
      } { ####1 } {} {}
      \draw [
        out={\tl_use:N \g_tmpb_tl},
        in={\tl_use:N \g_tmpa_tl},
        #1,
      ] (##1.####1) to (####2);
    }
  }
  \clist_set:Nn \l_tmpa_clist { #3 }
  \clist_map_inline:Nn \l_tmpa_clist {
    \regex_match_case:nnTF
    {
      { \. north } { \draw[#1] (##1) -- +( 0,+1); } % TODO: cleaner solution?
      { \. south }
        {
          \draw[out=-90, in=0,#1] (##1)
            to ($(\pgf@picminx, \pgf@y)$);
        } % TODO: not sure why this works
      { \. west  } { \draw[#1] (##1) -- +(-1, 0); }
      { \. east  } { \draw[#1] (##1) -- +(+1, 0); }
    } { ##1 } {} {}
  }
}
%    \end{macrocode}
% \end{macro}
%
% \iffalse
%</package>
% \fi
% \end{implementation}
%% =============================================================================
